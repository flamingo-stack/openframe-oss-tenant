# =============================================================================
# OpenFrame Helm Values - Complete Documentation
# =============================================================================
# This file documents ALL actual Helm values used in the OpenFrame project
# Organized by deployment hierarchy: app-of-apps → apps → individual services
# =============================================================================

# =============================================================================
# 1. APP-OF-APPS VALUES (app-of-apps/values.yaml)
# =============================================================================
# This is the top-level configuration that controls the entire OpenFrame deployment
# It defines global settings, registry credentials, and deployment environment

deployment:
  oss:
    enabled: true
    # Ingress configuration - enable only ONE of the following
    ingress:
      localhost:
        enabled: true   # Enable localhost ingress with nginx
        # TLS configuration (optional)
        # tls:
        #   cert: |
        #   key: |
      ngrok:
        enabled: false  # Enable ngrok ingress for external access
        # URL is required when ngrok is enabled
        url: reindeer-suitable-genuinely.ngrok-free.app
        credentials:
            apiKey: ""
            authtoken: ""
        allowedIPs:
          - 0.0.0.0/0
  saas:
    disabled: false
    # Ingress configuration for SaaS deployment
    ingress:
      localhost:
        enabled: true   # Enable localhost ingress with nginx for SaaS

global:
  repoDir: manifests  # Directory containing all Helm charts in the Git repository
  appsDir: apps       # Directory containing the apps chart (only defined in app-of-apps)
  repoURL: https://github.com/flamingo-stack/openframe-oss-tenant.git  # Git repository URL for ArgoCD
  repoBranch: main    # Git branch to deploy from (main branch for production)
  autoSync: true      # Enable automatic synchronization for all ArgoCD applications

# Registry credentials for pulling Docker images
registry:
  docker:
    server: https://index.docker.io/v1/  # Docker Hub registry endpoint
    username: ""                         # Docker Hub username
    password: ""                          # Docker Hub access token
    email: ""                             # Docker Hub email

registerJob:
  enabled: true       # Enable registration job for integrated tools

# =============================================================================
# 2. APPS VALUES (apps/values.yaml)
# =============================================================================
# This level receives values from app-of-apps and defines all ArgoCD applications
# Each app has: enabled, project, namespace, syncWave, and optional values/syncOptions

apps:
  # =============================================================================
  # SYNC WAVE 0: Platform Services (Infrastructure)
  # =============================================================================
  # These are deployed first as they provide foundational services
  
  namespace-platform:
    enabled: true     # Create the platform namespace
    project: default  # Use default ArgoCD project
    namespace: platform  # Kubernetes namespace for platform services
    syncWave: "0"     # Deploy in sync wave 0 (first)
    
  ngrok-operator:
    enabled: true     # Ngrok operator for local development ingress
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    values:
      registerJob:
        enabled: true
    
  cert-manager:
    enabled: true     # Certificate management for TLS
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    values:
      registerJob:
        enabled: true
    
  ingress-nginx:
    enabled: true     # NGINX ingress controller
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    values:
      registerJob:
        enabled: true
    
  promtail:
    enabled: true     # Log aggregation agent
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
    
  loki:
    enabled: true     # Log aggregation and storage
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
    
  prometheus:
    enabled: true     # Metrics collection and storage
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    syncOptions:
      ServerSideApply: true  # Use server-side apply for this app
    values:
      registerJob:
        enabled: true
      
  grafana:
    enabled: true     # Metrics visualization and dashboards
    project: platform # Use platform ArgoCD project
    namespace: platform  # Deploy to platform namespace
    syncWave: "0"     # Deploy in sync wave 0
    syncOptions:
      ServerSideApply: true  # Use server-side apply for this app
    values:
      registerJob:
        enabled: true

  # =============================================================================
  # SYNC WAVE 1: Datasources (Data Layer)
  # =============================================================================
  # These provide data storage and messaging infrastructure
  
  namespace-datasources:
    enabled: true     # Create the datasources namespace
    project: default  # Use default ArgoCD project
    namespace: datasources  # Kubernetes namespace for datasources
    syncWave: "1"     # Deploy in sync wave 1 (after platform)
    
  mongodb:
    enabled: true     # Primary document database
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  debezium-connect:
    enabled: true     # Change data capture connector
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  pinot: 
    enabled: true     # Real-time analytics database
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  zookeeper:
    enabled: true     # Distributed coordination service
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  cassandra:
    enabled: true     # NoSQL database for time-series data
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  kafka:
    enabled: true     # Message streaming platform
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
  
  nats:
    enabled: true     # Message streaming platform
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  mongodb-exporter:
    enabled: true     # MongoDB metrics exporter for Prometheus
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  redis:
    enabled: true     # In-memory data structure store
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1
    
  redis-exporter:
    enabled: true     # Redis metrics exporter for Prometheus
    project: datasources  # Use datasources ArgoCD project
    namespace: datasources  # Deploy to datasources namespace
    syncWave: "1"     # Deploy in sync wave 1

  # =============================================================================
  # SYNC WAVE 2: Microservices + Client Tools (Application Layer)
  # =============================================================================
  # These are the core OpenFrame services and development tools
  
  namespace-microservices:
    enabled: true     # Create the microservices namespace
    project: default  # Use default ArgoCD project
    namespace: microservices  # Kubernetes namespace for microservices
    syncWave: "2"     # Deploy in sync wave 2 (after datasources)
    
  openframe-config:
    enabled: true     # Configuration management service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-config
        tag: latest
      config:
        repo: openframe-oss-tenant-cfg
        branch: main
    
  openframe-management:
    enabled: true     # Management interface service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-management
        tag: latest
    
  openframe-api: 
    enabled: true     # Main API service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-api
        tag: latest
    
  openframe-gateway: 
    enabled: true     # API Gateway service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      deployment:
        ingress:
          localhost:
            enabled: true
          ngrok:
            enabled: false
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-gateway
        tag: latest
    
  openframe-client: 
    enabled: true     # Client service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-client
        tag: latest
    
  openframe-stream: 
    enabled: true     # Stream processing service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      registerJob:
        enabled: true
      servicemonitor:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-stream
        tag: latest
    
  openframe-ui: 
    enabled: true     # User interface service
    project: microservices  # Use microservices ArgoCD project
    namespace: microservices  # Deploy to microservices namespace
    syncWave: "2"     # Deploy in sync wave 2
    values:
      deployment:
        ingress:
          localhost:
            enabled: true
          ngrok:
            enabled: false
      registerJob:
        enabled: true
      image:
        repo: ghcr.io/flamingo-stack/openframe-oss-tenant/openframe-ui
        tag: latest

  # =============================================================================
  # CLIENT TOOLS (Sync Wave 2 - Development Tools)
  # =============================================================================
  # These are deployed in the same wave as microservices for development convenience
  # All client tools use the "client-tools" namespace and "client-tools" project
  
  namespace-client-tools:
    enabled: true     # Create the client-tools namespace
    project: default  # Use default ArgoCD project
    namespace: client-tools  # Kubernetes namespace for client tools
    syncWave: "2"     # Deploy in sync wave 2 (same as microservices)
    
  mongo-express:
    enabled: true     # MongoDB web-based admin interface
    project: client-tools  # Use client-tools ArgoCD project
    namespace: client-tools  # Deploy to client-tools namespace
    syncWave: "2"     # Deploy in sync wave 2
    
  kafka-ui:
    enabled: true     # Kafka web-based admin interface
    project: client-tools  # Use client-tools ArgoCD project
    namespace: client-tools  # Deploy to client-tools namespace
    syncWave: "2"     # Deploy in sync wave 2
    
  telepresence:
    enabled: true     # Local development tool for Kubernetes
    project: client-tools  # Use client-tools ArgoCD project
    namespace: client-tools  # Deploy to client-tools namespace
    syncWave: "2"     # Deploy in sync wave 2

  # =============================================================================
  # INTEGRATED TOOLS (Sync Wave 3 - External Integrations)
  # =============================================================================
  # These are deployed last as they depend on all other services
  # All integrated tools use the "integrated-tools" namespace and "integrated-tools" project
  
  namespace-integrated-tools:
    enabled: true     # Create the integrated-tools namespace
    project: default  # Use default ArgoCD project
    namespace: integrated-tools  # Kubernetes namespace for integrated tools
    syncWave: "3"     # Deploy in sync wave 3 (last)
    
  authentik: 
    enabled: true     # Identity and access management (SSO)
    project: integrated-tools  # Use integrated-tools ArgoCD project
    namespace: integrated-tools  # Deploy to integrated-tools namespace
    syncWave: "3"     # Deploy in sync wave 3
    
  fleetmdm: 
    enabled: true     # Mobile device management
    project: integrated-tools  # Use integrated-tools ArgoCD project
    namespace: integrated-tools  # Deploy to integrated-tools namespace
    syncWave: "3"     # Deploy in sync wave 3
    
  meshcentral: 
    enabled: true     # Remote management and monitoring
    project: integrated-tools  # Use integrated-tools ArgoCD project
    namespace: integrated-tools  # Deploy to integrated-tools namespace
    syncWave: "3"     # Deploy in sync wave 3
    
  tactical-rmm: 
    enabled: true     # Remote monitoring and management
    project: integrated-tools  # Use integrated-tools ArgoCD project
    namespace: integrated-tools  # Deploy to integrated-tools namespace
    syncWave: "3"     # Deploy in sync wave 3

# =============================================================================
# NOTES ON APPS STRUCTURE
# =============================================================================
# 
# The apps level serves as the application orchestrator:
# 1. Receives global configuration from app-of-apps
# 2. Defines all ArgoCD applications with their deployment parameters
# 3. Organizes applications by sync waves for proper deployment order
# 4. Groups applications by namespace and project for logical separation
#
# Sync Wave Strategy:
# - Wave 0: Platform services (infrastructure - monitoring, ingress, certs)
# - Wave 1: Datasources (data layer - databases, message queues, caches)
# - Wave 2: Microservices + Client Tools (application layer + dev tools)
# - Wave 3: Integrated Tools (external integrations - SSO, MDM, RMM)
#
# Key differences from app-of-apps:
# - No registry credentials (inherited from app-of-apps)
# - No appsDir setting (not needed at this level)
# - repoBranch is "feature/helm-structure" (vs "main" in app-of-apps)
# - Contains all application definitions with sync waves
#
# =============================================================================
